#cloud-config
locale: en_US.UTF-8
timezone: Asia/Seoul

package_update: true
package_upgrade: true

packages:
  - curl
  - jq
  - openssl

write_files:
  - path: /tmp/create_kratos_identity.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      set -e
      
      # Î°úÍ∑∏ Ìï®Ïàò
      log() {
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/kratos-provisioning.log
      }
      
      log "Starting Kratos identity provisioning..."
      
      # ÌôòÍ≤Ω Î≥ÄÏàò ÌôïÏù∏
      if [[ -z "${kratos_admin_url}" || -z "${user_email}" || -z "${user_name}" ]]; then
        log "ERROR: Required environment variables missing"
        log "kratos_admin_url: ${kratos_admin_url}"
        log "user_email: ${user_email}" 
        log "user_name: ${user_name}"
        exit 1
      fi
      
      # Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
      if [[ -z "${user_role}" ]]; then
        USER_ROLE="user"
      else
        USER_ROLE="${user_role}"
      fi
      log "Using role: $USER_ROLE"
      
      # Kratos Ïó∞Í≤∞ ÌôïÏù∏ (ÏµúÎåÄ 30Ï¥à ÎåÄÍ∏∞)
      log "Testing connection to Kratos Admin API..."
      for i in {1..6}; do
        if curl -k -s -f "${kratos_admin_url}/identities" > /dev/null 2>&1; then
          log "Kratos Admin API is accessible"
          break
        else
          log "Attempt $i: Kratos Admin API not ready, waiting 5 seconds..."
          if [ $i -eq 6 ]; then
            log "ERROR: Cannot connect to Kratos Admin API after 30 seconds"
            exit 1
          fi
          sleep 5
        fi
      done
      
      # ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏ ÏÉùÏÑ±
      PW=$(openssl rand -base64 24 | tr -dc 'A-Za-z0-9' | head -c 20)
      log "Generated temporary password"
      
      # Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê ÌôïÏù∏
      log "Checking if user already exists..."
      EXISTING_USER=$(curl -k -s "${kratos_admin_url}/identities" | jq -r --arg email "${user_email}" '.[] | select(.traits.email == $email) | .id' 2>/dev/null || echo "")
      
      if [[ -n "$EXISTING_USER" ]]; then
        log "User with email ${user_email} already exists (ID: $EXISTING_USER)"
        exit 0
      fi
      
      # Identity ÏÉùÏÑ±ÏùÑ ÏúÑÌïú JSON Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
      log "Creating new identity for ${user_email}..."
      
      # traits Íµ¨ÏÑ±
      TRAITS='{"email":"'${user_email}'","name":"'${user_name}'","role":"'$USER_ROLE'"}'
      log "Final traits: $TRAITS"
      
      # ÌôòÍ≤Ω Î≥ÄÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ JSON ÏÉùÏÑ±
      JSON_DATA='{"schema_id":"default","state":"active","traits":'$TRAITS',"credentials":{"password":{"config":{"password":"'$PW'"}}},"verifiable_addresses":[{"value":"'${user_email}'","via":"email","verified":true,"status":"completed"}],"recovery_addresses":[{"value":"'${user_email}'","via":"email"}]}'
      
      # JSON Îç∞Ïù¥ÌÑ∞ Î°úÍπÖ (ÎπÑÎ∞ÄÎ≤àÌò∏ ÎßàÏä§ÌÇπ)
      JSON_DATA_MASKED=$(echo "$JSON_DATA" | sed 's/"password":"[^"]*"/"password":"***MASKED***"/g')
      log "Request JSON: $JSON_DATA_MASKED"
      
      # API Ìò∏Ï∂ú
      log "Making API request to ${kratos_admin_url}/identities"
      RESPONSE=$(curl -k -s -w "\n%%{http_code}" -X POST "${kratos_admin_url}/identities" \
        -H "Content-Type: application/json" \
        -H "Accept: application/json" \
        -d "$JSON_DATA" \
        --connect-timeout 30 \
        --max-time 60)
      
      # HTTP ÏÉÅÌÉú ÏΩîÎìú Î∂ÑÎ¶¨
      HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
      BODY=$(echo "$RESPONSE" | head -n -1)
      
      log "HTTP Response Code: $HTTP_CODE"
      log "Response Body: $BODY"
      
      if [[ "$HTTP_CODE" == "201" ]]; then
        IDENTITY_ID=$(echo "$BODY" | jq -r '.id // "unknown"')
        log "SUCCESS: Identity created successfully with ID: $IDENTITY_ID"
        
        # ÏÉùÏÑ±Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º ÌååÏùºÏóê Ï†ÄÏû•
        echo "========================================" > /tmp/kratos_user_info.txt
        echo "üîê ORY Kratos Identity Created" >> /tmp/kratos_user_info.txt
        echo "========================================" >> /tmp/kratos_user_info.txt
        echo "Email     : ${user_email}" >> /tmp/kratos_user_info.txt
        echo "Name      : ${user_name}" >> /tmp/kratos_user_info.txt
        echo "Role      : $USER_ROLE" >> /tmp/kratos_user_info.txt
        echo "ID        : $IDENTITY_ID" >> /tmp/kratos_user_info.txt
        echo "Password  : $PW" >> /tmp/kratos_user_info.txt
        echo "Created   : $(date)" >> /tmp/kratos_user_info.txt
        echo "Admin URL : ${kratos_admin_url}" >> /tmp/kratos_user_info.txt
        echo "========================================" >> /tmp/kratos_user_info.txt
        
        log "User information saved to /tmp/kratos_user_info.txt"
        
      elif [[ "$HTTP_CODE" == "409" ]]; then
        log "WARNING: Identity may already exist (HTTP 409)"
        log "Response: $BODY"
      elif [[ "$HTTP_CODE" == "400" ]]; then
        log "ERROR: Bad request (HTTP 400) - Check JSON format and schema"
        log "Response: $BODY"
        exit 1
      else
        log "ERROR: Failed to create identity. HTTP Code: $HTTP_CODE"
        log "Error response: $BODY"
        exit 1
      fi
      
      log "Kratos provisioning completed successfully"

  - path: /etc/motd
    content: |
      ==========================================
      üîê ORY Kratos Identity Auto‚ÄëProvisioned
      ==========================================
      Email : ${user_email}
      Name  : ${user_name}
      Role  : ${user_role}
      
      Check /tmp/kratos_user_info.txt for details
      Check /var/log/kratos-provisioning.log for logs
      ==========================================

runcmd:
  - export kratos_admin_url="${kratos_admin_url}"
  - export user_email="${user_email}"
  - export user_name="${user_name}"
  - export user_role="${user_role}"
  - /tmp/create_kratos_identity.sh